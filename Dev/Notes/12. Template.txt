1. C++의 템플릿
    1) C++은 일반화 프로그래밍이 가능한 언어임
        - Generic Programming 
    2) C++에서는 템플릿을 이용해서 일반화 프로그래밍을 사용할 수 있음.   
    3) 함수 또는 클래스를 일반화시키고, 매개변수 타입을 지정하여 
       틀에서 찍어 내듯이 함수나 클래스 코드를 생산하는 기법 
    4) 제네릭 타입 
        - 일반화를 위한 데이터 타입 

    5) 형식 
        템플릿을 선언하는 키워드
        --------
        template <class T>   
        void swap(T& a, T& b) {

        }                  

2. 템플릿 (Template)
    1) 매개변수의 타입에 따라서 함수 및 클래스를 손쉽게 사용할 수 있도록 해줌 
    2) 타입 자체가 매개변수에 의해서 다루어 짐

3. 함수 템플릿 (Function Template)            
    1) 각각의 자료형에 의해서 처음으로 호출이 될때, 
       C++ 컴파일러는 해당 타입의 인스턴스를 생성하게 됨 
       => 이후에 생성된 하나의 인스턴스는 해당 자료형에 대해서 특수화가 이루어짐 

4. 클래스 템플릿 (Class Template)
    1) 클래스를 일반화하기 위해서 클래스 템플릿을 활용할 수 있음.
    2) 클래스 템플릿을 사용하면 자료형 따라서 다르게 동작하는 클래스 집합을 만들 수 있음.       