1. 현실 세계 vs 객체지향의 상속
    1) 현실 세계에서의 상속
        - 부모가 가진 자신의 일부를 각 자식에게 나누어 물려줌 
    2) 객체지향에서의 상속
        - 부모의 모든 것을 자식에게 물려줌.
        - 물려줘도 부모에게서 없어지는 것이 아님.

2. 상속(Inheritance)
    1) OOP의 주요한 특성 중 하나임.
    2) 자식 클래스(Child Class)가 부모 클래스(Parent Class)의 속성을 
       그대로 물려 받아 사용할 수 있음.
       - 재사용성, 확장 
    3) UML
        -               부모 클래스, 기본 클래스, base class
                             /|\   
                              |  상속    
                              |  
                         자식 클래스, 파생 클래스, derived class        
    4) 자식 클래스는 콜론(:)을 활용하여 부모 클래스와 연결될 수 있음.
    5) 형식
        class 자식클래스명 : public 부모클래스명 
        {
            // 새로운 멤버 변수 or 멤버 함수 
        }      

3. is-a 상속 vs has-a 상속     
    1) is-a 상속
        - (자식) is a (부모)
            - 학생은 사람이다     
            - 고양이는 동물이다
        - 역은 성립하지 않음                                   
    2) has-a 상속
        - (A) has a (B)
        - 포함 관계
            - 교실엔 책상이 있다.
            - 숲엔 나무가 있다.
            - 상품엔 제조일자가 있다.

4. 다중 상속 (Multipple Inheritance)
    1) 여러 개의 클래스로부터 멤버를 상속 받는 것


