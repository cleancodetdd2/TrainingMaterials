1. 구조체와 클래스의 차이점
    1) 클래스에서는 내부적으로 '함수'등을 포함할 수 있음.
    2) 클래스는 상속(Inheritance)등의 개념을 그대로 이용할 수 있음
        - 객체 지향 프로그래밍 (OOP)을 가능하도록 해주는 기본적인 단위임.

2. C++ 객체 지향 특성 
    1) 캡슐화(encapsulation)
        - 데이터를 캡슐로 싸서 외부의 접근으로부터 보호 
        - information hiding
    2) 클래스와 객체 
        - 클래스 
            - 객체를 만드는 틀 
            - 캡슐을 표현함 
        - 객체
            - 클래스라는 틀에서 생겨난 실체
            - object, instance와 같은 뜻     
    3) 상속(Inheritance)
        - 자식이 부모의 것을 물려받는 것과 유사
        - 객체가 자식 클래스의 멤버와 부모 클래스에 선언된 멤버들을 가지고 생성됨    

    4) 다형성(Polymorphism)
        - 하나의 기능이 경우에 따라 다르게 보이거나 다르게 작동하는 현상 
        - 함수 다중정의(Overloading), 함수 재정의(Overriding), 연산자 중복정의        

3. 클래스와 객체
    1) 세상 모든 것이 객체임
    2) 객체는 캡슐화 됨
        - 객체는 본질적인 특성을 갖고 있음
            - 객체를 캡슐로 싸서 그 내부를 보호하고 볼 수 없게 함.
        - 객체의 일부 요소는 공개됨 
            - 외부와의 인터페이스를 위해 일부분 공개 
    3) 객체는 멤버 변수(state)와 멤버 함수(behavior)로 구성됨      
        - 예)
            - TV 객체
                - 상태
                    - 채널, 음량, 크기, 무게 ....
                     (int channel = 100, int volume = 10)
                - 행동
                    - 켜기, 끄기, 채널 증가, 채널 감소, 음량 증가, 음량 줄이기 .... 
                     (void powerOn(), void powerOff(), increaseChannel(),...) 

    4) 클래스 
        - 객체를 만들어내기 위해 정의된 설계도, 틀 
        - 클래스는 객체가 아님. 실체도 아님.
        - 멤버 변수와 멤버 함수 선언 

    5) 객체 
        - 객체는 생성될 때 클래스 형태 그대로 생성됨
        - 멤버 변수와 멤버 함수로 구성 
        - 메모리에 생성, 실체(instanace)라고 부름 
        - 하나의 클래스 틀에서 찍어내 여러 개의 객체 생성 가능 

4. C++ 클래스 만들기 
    1) 클래스 선언부와 클래스 구현부로 구성 
    2) 클래스 선언부
        - 멤버 변수와 멤버 함수 선언 
        - 멤버에 대한 접근 권한 지정 
            - private, public, protected 
    3) 클래스 구현부 
        - 클래스에 정의된 모든 멤버 함수 구현  

5. this 포인터 
    1) 기본적으로 하나의 클래스에서 생성된 인스턴스(instance)는
        => 서로 독립된 메모리 영역에 멤버 변수를 저장하고 관리함.
    2) 멤버 함수는 모든 인스턴스가 공유함
        => 함수 내에서 인스턴스를 구분할 필요가 있음 

    3) 포인터 자료형, 상수
        => 값을 변경할 수 없음                                                                                            

