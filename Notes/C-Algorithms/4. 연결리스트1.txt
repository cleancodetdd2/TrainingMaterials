1. 연결리스트 필요성 
    1) 일반적으로 배열을 이용하여 데이터를 순차적으로 저장하고, 나열할수 있음
    2) 배열을 사용하는 경우 메모리 공간이 불필요하게 낭비 될 수 있음

2. 배열 기반의 리스트 
    1) 데이터를 순차적으로 저장하고, 처리    
    2) 특정한 위치의 원소를 삭제 
    3) 배열로 만들었으므로 특정한 위치의 원소에 즉시 접근할 수 있는 장점
    4) 데이터가 들어갈 공간을 미리 메모리에 할당해야 한다는 단점 
        - 원하는 위치로의 삽입이나 삭제가 비효율적임 

3. 연결 리스트 
    1) 일반적으로 연결 리스트는 구조체와 포인터를 함께 사용하여 구현함 
    2) 연결 리스트는 리스트의 중간 지점에 노드를 추가하거나 삭제할 수 있어야 함.
    3) 필요할 때마다 메모리 공간을 할당 받음 
    4) 포인터를 이용해 단방향적으로 다음 노드를 가리킴 
    5) 일반적으로 연결 리스트의 시작 노드를 헤드(Head)라고 하며 별도 관리함
    6) 다음 노드가 없는 끝 노드의 다음 위치 값으로는 NULL을 넣음  
    7) 삽입과 삭제가 배열에 비해서 간단함 (효율적임)
    8) 배열과 다르게 특정 인덱스로 즉시 접근하지 못하며, 원소를 차례대로
       검색해야 함.(비효율적임)
    8) 추가적인 포인터 변수가 사용되므로 메모리 공간이 낭비됨        

     next------->data next---------->data next----------> NULL    
    -------     -----------          ----------
     Head         일반 노드           일반 노드 


    7) 연결 리스트 삽입 예:
     next------->1 next---------->2 next----------> NULL    
    -------     -----------       ----------
     Head         일반 노드        일반 노드      

            7 next 
           ----------
           삽입할 노드 

    8) 연결 리스트 삭제 예:
     next------->1 next---------->2 next----------> NULL    
    -------     -----------       ----------
     Head         삭제할 노드        일반 노드      

        