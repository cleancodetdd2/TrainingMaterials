1. 그래프 (Graph) 
    1) 연결되어 있는 객체 간의 관계를 표현하는 자료구조 
        - 트리(tree)도 그래프의 특수한 경우임 
        - 예) 지도에서 도시들의 연결 상태 
        - 예) 전기회로의 소자 간의 연결 상태
        - 예) 지하철 노선도, SNS 인맥관계 
    2) 그래프는 정점과 간선으로 구성된 수학적 구조임
        - 객체 간의 관계를 모델링하는 데 사용됨         

    3) 그래프 구성 요소(표시 방법)
        - 정점 (vertex, 노드)
            - 여러 가지 특성을 가질 수 있는 객체 의미 
            - 그래프를 구성하는 기본 요소임
        - 간선 (edge)  
            - 정점들 간의 관계 의미 
            - 두 정점들을 연결하는 선을 말함
            - 간선은 방향성과 가중치에 따라 다양한 유형으로 분류됨           
        - 정점과 간선의 예
            - 구글 지도 
                - 각 위치(도시)는 정점으로 경로는 간선으로 표시함      

2. 그래프의 종류
    1) 방향
        - 무방향 그래프 (Undirected graph)
            - 간선의 방향성 없음 (양방향 연결)
        - 방향 그래프 (Directed graph)
            - 간선의 방향성 있음 (단방향 연결)
    2) 가중 
        - 가중 그래프 
            - 간선에 가중치가 부여됨
        - 비가중 그래프             
            - 간선에 가중치가 없음
            - 기본 1 값 가짐           

3. 그래프 구현 방식 
    1) 2차원 배열 사용하는 방식 (인접 행렬)
        - 비가중 그래프의 가중치는 1임 
    2) 리스트 사용하는 방식 (인접 리스트)
        - 공간의 낭비를 막으며, 효율적으로 그래프를 저장하는 방법임.
        - 정점은 배열에 저장함 
                      
4. 그래프 순회 
    1) 그래프의 모든 노드(정점)를 체계적으로 방문하는 과정 
    2) 그래프 순회는 그래프 구조에서 데이터를 검색하거나 특정 조건을 만족하는
       노드를 찾는데 사용됨 
    3) 종류
        - 너비 우선 탐색
        - 깊이 우선 탐색 (DFS, Depth-First Search)     
    4) 같은 정점를 재 방문하는 것을 막기 위해 불방문 배열(Boolean Visited Array)을 사용함                                

5. 깊이 우선 탐색 (DFS)
    1) 그래프의 시작 노드에서 가능한 깊이까지 계속 내려간 후,
       다시 백트래킹(backtracking)하여 다른 경로를 탐색함 
       - 보다 깊은 것을 우선적으로 하여 탐색하는 알고리즘 
       - 기본적으로 전체 노드를 맹목적으로 탐색하고자 할 때 사용함 
       - 빠르게 모든 경우의 수를 탐색하고자 할 때 쉽게 사용할 수 있음 
    2) 방식 : 스택(stack)을 사용하거나 재귀호출을 통해 구현함 
    3) 모든 경로를 탐색하거나, 특정 조건을 만족하는 경로를 찾을 때 유용함 
    4) DFS 알고리즘
        - 시작 노드를 스택에 삽입하고 방문 표시를 함 
        - 스택에서 노드를 꺼내고, 인접 노드 중 방문하지 않은 노드를 스택에 삽임함
        - 스택이 빌 때까지 위 과정을 반복함 
         
