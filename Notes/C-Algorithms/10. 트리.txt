1. 트리(Tree)
    1) 나무의 형태를 뒤집은 것과 같은 형태의 자료구조임 
    2) 비선형 자료구조, 계층적 관계를 나타냄 
        - 트리는 노드(Node)와 간선(Edge)으로 이루어져 있음
        - 한 노드에서 다른 노드로 연결되는 방향성이 있는 그래프임.
    3) 용어
        - 루트(Root)
            - 트리의 최상위 노드로, 트리 구조의 시작점임 
        - 노드(Node)
            - 각 노드는 데이터와, 자식을 가리키는 포인터로 구성됨 
        - 간선(Edge)
            - 두 노드를 연결하는 선, 부모와 자식 관계를 나타냄 
        - 리프(Leaf)
            - 자식 노드가 없는 끝 노드(말단 노드) 
        - 부모 (Parent)
            - 특정 노드를 참조하는 상위 노드임 
        - 자식(Children)
            - 부모 노드에서 아래로 연결된 노드들임 
        - 형제(Sibling)
            - 같은 부모를 가지는 노드들 
        - 높이 (Height)
            - 루트에서 리프까지의 가장 긴 경로의 간선 수
        - 깊이 (Depth)
            - 특정 노드까지의 경로에 있는 간선 수 
        - 레벨 (Level)
            - 트리의 계층적 단계를 나타냄. 
            - 루트 노드의 레벨은 0, 하위로 내려갈수록 레벨이 1씩 증가함 

2. 이진 트리 (Binary Tree)
    1) 특징
        - 각 노그가 가질 수 있는 자식의 수
            - 왼쪽 자식과 오른쪽 자식으로 최대 두개만 가질 수 있음. 
                - 각 노드의 자식은 2명 이하로 유지해야 함 
        - 이진트리는 순서가 정의되어 있지 않으므로 순서 없이 삽입 시
          편향 이진 트리가 될 수 있음(비효율적) => 완전 이진 트리로 해결   

    2) 유형 
        - 완전 이진 트리 (Complete Binary Tree)
            - 마지막 레벨을 제외하고 모든 레벨이 노드로 가득 차 있으며,
              마지막 노드는 왼쪽부터 채워짐 
        - Full Binary Tree
        - Pertect Binary Tree

    3) 트리의 순회 방법
        - 순회란 트리의 모든 노드를 방문하는 방법 
            - 전위 순회(Preorder)
                - 루트(부모) -> 왼쪽 자식 -> 오른쪽 자식
            - 중위 순회(Inorder)
                - 왼쪽 자식 -> 루트(부모) -> 오른쪽 자식
            - 후위 순회(Postorder)    
                - 왼쪽 자식 -> 오른쪽 자식 -> 루트(부모) 

3. 이진 트리 구현 및 순회 
    1) 이진 트리는 포인터 이용하여 구현
    2) 효과적인 데이터 관리가 가능함 
    3) 예
                30
              /    \
             17    48
            /  \   / \
           5   23 37 50   
